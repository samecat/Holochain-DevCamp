#![feature(try_from)]
#[macro_use]
extern crate hdk;
extern crate serde;
#[macro_use]
extern crate serde_derive;
extern crate serde_json;
#[macro_use]
extern crate holochain_core_types_derive;
extern crate boolinator;
use boolinator::Boolinator;
use hdk::{
    holochain_core_types::{
        dna::entry_types::Sharing,
        json::JsonString,
        entry::Entry,
        error::HolochainError,
        cas::content::Address,
    },
    error::ZomeApiResult,
};
use holochain_wasm_utils::api_serialization::get_links::GetLinksResult;


#[derive(Serialize, Deserialize, Debug, DefaultJson)]
struct Person {
	myname: String,
}

//Person::String

fn handle_add_person(name: String) -> ZomeApiResult<Address> {
	let person_entry = Entry::App(
			"person_".into(),  //AppEntryType; use the entry! name
			Person {myname: name}.into() //AppEntryValue; instantiate a Person on the fly with the input name
		);
	hdk::commit_entry(&person_entry)
}

define_zome! {
    entries: [
    	entry!(
            name: "person_",
            description: "Human with a name",
            sharing: Sharing::Public,
            native_type: Person,  //need to define it as struct above, and needs to be used in validation input type below
            validation_package: || hdk::ValidationPackageDefinition::Entry,
            validation: |person1: Person, _ctx: hdk::ValidationData| {
                Ok(())
            }
        )
    ]

    genesis: || { Ok(()) }

    functions: [
    	add_person: {
    		inputs: |name: String|,
    		outputs: |result: ZomeApiResult<Address>|,
    		handler: handle_add_person
    	}
    ]

    traits: {
    	hc_public [add_person]
    }
}
